@model WebNoteClient.Models.Note.NotePageViewModel

@{
	ViewData["Title"] = "Notes";
}

<h1>Notes</h1>

<hr />

<div class="container">
	<div class="row">
		<div class="col-md-3">
			<h2>Categories</h2>
			<a href="@Url.Action("Index", "Note", new { searchText = Model.SearchQuery })"
			   class="btn my-1 @(Model.SelectedCategoryId == null ? "btn-secondary" : "btn-outline-secondary") border-0">
				All
			</a>
			<button id="create-category-btn"
					class="btn btn-outline-secondary d-block category-item"
					onclick="openEditModal(-1, '')">
				New...
			</button>
			@foreach (var category in Model.Categories)
			{
				<div>
					<a href="@Url.Action("Index", "Note", new { categoryId = category.Id, searchText = Model.SearchQuery })"
					   class="btn my-1 @(Model.SelectedCategoryId == category.Id ? "btn-secondary" : "btn-outline-secondary") category-item">
						@category.Name
					</a>
					<button id="edit-category-btn"
							class="btn btn-outline-secondary category-item"
							onclick="openEditModal(@category.Id, '@category.Name')">
						<i class="bi bi-pencil p-0"></i>
					</button>
					<form asp-action="DeleteCategory" asp-route-id="@category.Id" method="post" class="d-inline ">
						@Html.AntiForgeryToken()
						<button type="submit"
								class="btn btn-outline-danger category-item"
								onclick="return confirm('Are you sure you want to delete this category?');">
							<i class="bi bi-trash p-0"></i>
						</button>
					</form>
				</div>
			}
		</div>
		<div class="col-md-9 grey-yellow-bg">
			@* <h2>Notes</h2> *@
			<form asp-action="Index" method="get" asp-for-categoryId="@Model.SelectedCategoryId">
				<input id="searchInput"
					   name="searchText"
					   type="search"
					   placeholder="Search..."
					   value="@Model.SearchQuery"
					   class="form-control my-3" />
			</form>
			@foreach (var note in Model.Notes)
			{
				var checkboxId = $"clipToggle_{note.Id}";
				<div class="item-card">
					<form asp-action="TogglePin" asp-route-id="@note.Id" class="d-inline">
						<input type="checkbox"
							   class="form-check-input visually-hidden"
							   id="@checkboxId"
							   @(note.IsPinned ? "checked" : "")>
						<button type="submit" class="form-check-label clip-label" for="@checkboxId">
							<i class="bi bi-paperclip"></i>
						</button>
					</form>
					<div>
						<h3>@note.Title</h3>
						<pre>@note.Content</pre>
						<p class="text-secondary">@note.ChangeDate.ToString("dd/MM/yyyy")</p>
					</div>
					<div class="item-card-btn-group">
						<a class="btn btn-secondary" asp-action="Edit" asp-route-id="@note.Id"><i class="bi bi-pencil"></i></a>
						<form asp-action="Delete" asp-route-id="@note.Id" method="post" class="d-inline">
							@Html.AntiForgeryToken()
							<button type="submit"
									class="btn btn-danger"
									onclick="return confirm('Are you sure you want to delete this note?');">
								<i class="bi bi-trash"></i>
							</button>
						</form>
					</div>
				</div>
			}
			<a asp-action="Create" class="btn btn-float-add">Add</a>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Edit Category</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<input type="hidden" id="editCategoryId" />
				<label>Category name</label>
				<input type="text" id="editCategoryName" class="form-control" />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" onclick="saveCategory()">Save</button>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		function openEditModal(categoryId, categoryName) {
			// Set modal values
			document.getElementById('editCategoryId').value = categoryId;
			document.getElementById('editCategoryName').value = categoryName;
			// Open modal
			var modal = new bootstrap.Modal(document.getElementById('editCategoryModal'));
			modal.show();
		}

		function saveCategory() {
			var categoryId = document.getElementById('editCategoryId').value;
			var newName = document.getElementById('editCategoryName').value.trim();

			if (!newName) {
				alert('Name cannot be empty');
				return;
			}

			var requestActionUrl = '@Url.Action("UpdateCategory", "Note")';

			if (categoryId === "-1") {
				requestActionUrl = '@Url.Action("CreateCategory", "Note")';
			}

			// Send request to server
			fetch(requestActionUrl, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({ id: categoryId, name: newName })
			})
			.then(response => response.json())
			.then(result => {
				if (result.success) {
					// Close modal
					var modal = bootstrap.Modal.getInstance(document.getElementById('editCategoryModal'));
					modal.hide();

					// Reload page
					location.reload();
				} else {
					alert('Error: ' + result.message);
				}
			})
			.catch(() => {
				alert('Failed to save category');
			});
		}
	</script>
}